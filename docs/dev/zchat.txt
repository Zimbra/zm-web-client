ABOUT
The Zimbra Collaboration suite will have a Chat application tightly integrated to it.
This is made possible using Converse.js as the XMPP JS library. This document lists the packages used,
building/installing the packages, configuring them and how the integration/execution happens within ZCS web client.

PACKAGES
1.) Converse.js (Available at https://github.com/jcbrand/converse.js/releases/tag/v0.9.1)
|
|-> npm (node_modules)
|	If you don't have node/npm installed then you may visit => https://nodejs.org/ for more installation and setup information.
|
|-> bower
|	Note - The bower.json has an entry for crypto-js that had to be changed in v0.9.1.
|		   while doing "make build" the 'JSMIN' target failed and hence changed the bower.json
|
|-> grunt
|
|-> grunt-cli
|
|-> bourbon
	Note - Assuming bower has been installed till this point, refer to https://github.com/thoughtbot/bourbon
	You may install bourbon using bower or you may add bourbon to GemFile and install using bundle.

Steps:
a.) Once npm/nodejs is setup, go to Terminal -> go to conversejs source folder -> execute following commands:
	$> npm install
	$> bower update
	$> grunt jst
	$> make build

	Note - If you are behind a corporate proxy then export http_proxy, https_proxy env variables first and do
		   "sudo npm install"

		   In case bower update fails then you might need to set proxy for GIT commands.

2.) Ejabberd
-> A local copy of XMPP server to make chat work in the DEV environment.

BUILD PROCESS
-> Using the 'make' file available in Converse package.
-> 'make dev' will get you a developer build. For more information visit => https://conversejs.org/docs/html/development.html
-> 'make build' will get you a production build. For more information visit => https://conversejs.org/docs/html/builds.html
-> With the upgradation to converse 0.9.4, the 'make css' has changed a bit:
	In the converse MakeFile:
	1.) The command line variables section, SASS is now referring to ./.bundle/bin/sass
	2.) In case you are using the old compass SASS then just change ./.bundle/bin/sass to sass or path to your existing sass command
	3.) For css:: stamp-bundler, if you are not using bundle/sass then you may want to change it to $(SASS) sass/converse.scss > css/converse.css
	4.) For watch:: stamp-bundler, for this bourbon needs to be pre-installed. It has also been checked in to our chat repository.
		Change this to $(SASS) --watch -I ./bourbon/ sass/converse.scss:css/converse.css

The build process (make build) will go through a series of build targets and it is better to ensure all the targets pass.
Targets:
a.) jst:compile
b.) cssmin:minify
c.) jsmin

CONFIGURATION
-> UI Integration:
   Getting started with basic set of config is pretty simple. Just copy-paste the below code to your JS init function and we are good to go:

	require(['converse'], function (converse) {
	    converse.initialize({
	        auto_list_rooms: false,
	        auto_subscribe: false,
	        bosh_service_url: 'http://localhost:5280/http-bind', // To be replaced with BOSH URL received from the server.
	        hide_muc_server: false,
	        i18n: locales.en,
	        //keepalive: true, // used while prebind auth
	        //jid: appCtxt.getLoggedInUsername(), // used while prebind auth
	        //prebind: true, // used while prebind auth
	        show_controlbox_by_default: true,
	        roster_groups: true
	    });
	});

INTEGRATION
-> The way Converse.js is coupled in ZCS UI code.

EXECUTION
-> Launching the chat application along with ZCS.

TEMPLATING and CUSTOMIZATION
-> The templates are available at -> /converse.js-0.9.1/src/templates
-> These are available as .html files to us, for more information visit => https://conversejs.org/docs/html/theming.html#id3
-> Once changes are done to template files you need to run the 'make build' target that merges the content of these template files to converse.js

THEMING/MODIFYING THE CSS
-> The CSS is generated from .scss (sass) files. Converse package is shipped with converse.scss and variable.scss, names being self explanatory the variable.scss holds all the SASS reusable variables and converse.scss contains styling for chat app.
-> Converse SASS has following library dependency
|
|-> bourbon (http://bourbon.io/)
|	It's a library converse uses for the SASS mixin it provides. Mixin can be interpreted as Macros available in our programming languares.
|	To know more about mixin => http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
|	To know more about bourbon => http://bourbon.io/docs/

-> Currently the bourbon package is checked-in to our repository under => /JUDASPRIEST/ZimbraWebClient/converse/converse.js-0.9.1/bourbon/ branch. This version was fetched as per the Gemfile provided by converse.

-> In converse.scss you will find in the very first line an @import statement. This imports the mixin and it's dependencies provide in _bourbon.scss. To resolve it to correct path the original line has been commented out and new statement is as below:
@import "bourbon/_bourbon";

This falls back to the package that is available in our converse package directory.
	
-> Getting started with styling changes follows these steps: 
	a.) Modify converse.scss or variable.scss as per your need.
	b.) Open terminal (bash/windows command prompt) -> navigate to your local Perforce converse directory 

PATCHES
-> In order to help with the upgrade we will be using patches for all the changes done to Converse.js. Make any changes to the converse.js javascript and templates file and run following command in ZimbraWebclient/converse directory

# make

This will build the converse.js and also create a new patch diff file called work.diff.
When your changes looks good copy this diff file into the patches directory and rename it with a sequential number for eg. 01-bug-xxxx.diff

# cp work.diff patches/01-bug-xxxx.diff

Make sure to use sequential numbering for the start of the patch, and that the
number is greater than the other existing patches. Otherwise, the patches may
fail to apply.
