How to Write a Hello World Application for the Zimbra Web Client
by Jeremy Osborne
Written 16 February 2011

==== Table of Contents ====
1. Why?
2. What is an 'app' in Zimbra lingo?
3. How?
4. Deploy


==== Why? ====
Because I'm new and I figure if I can figure out how to write a Zimbra App,
even if it is an empty shell inside of a deployed Zimbra Web Client than the
rest of the application is just code. Figuring out how to get the Application
framework correct seems like the hardest part (famous last words).

It's also a good experiment to see what exactly is the minimal, expected
app interface one needs to implement should one need to build an app using
a different framework.



==== What is an 'app' in Zimbra lingo? ====
Log into dogfood or catfood at zimbra. An app lives inside of a single tabbed
view: mail, address book, calendar, briefcase, they're all apps.



==== How? ====

Copy the "helloworld/" folder located and paste into the following directory:

ZimbraWebClient/WebRoot/js/zimbraMail/

All applications have their application code bundled and loaded at various
stages of the app lifecycle. To define our HelloWorld application package code
copy any file located inside of the local package folder into:

ZimbraWebClient/WebRoot/js/zimbraMail/package

The "helloworld/" folder contains a our HelloWorld application. The code has
rudimentary comments about what each of the basic required items does.

Copying the "helloworld/" folder and the package information is not enough to
register the application with the Zimbra Web Client.

To complete the registration of the application, please do the following.
Ignore lines that begin with the double slash comment (//) mark.


////////////// Edit: ZimbraWebClient/WebRoot/js/zimbraMail/package/Startup1_2.js
// We need to make sure our App gets loaded in the initial package load,
// as it is the entry point for everything else we do.
// The following can be created at the bottom of file:
AjxPackage.require("zimbraMail.helloworld.ZmHelloWorldApp");



//////////////////////// Edit: ZimbraWebClient/WebRoot/messages/ZmMsg.properties
// Edit localization strings for our application.
// To make the label be displayed in our application tab
// locate the line that looks something like the following:
// help = Help
// and right above it place the label translations for our application and
// our application tooltip
helloworld = Hello World
gotoHelloWorld = Go to Hello World



//////////////////////// Edit ZimbraWebClient/WebRoot/js/zimbraMail/core/ZmId.js
// NOTE: Due to file load order, the following setting should not
// need to be made within the ZmSetting.js file. The setting should
// be done at the end of the application file.
// See the ZmHelloWorldApp.js
//////// Old method below
// Our application needs an Identification
// find the following line:
// ZmId.APP_BRIEFCASE = "Briefcase";
// and add the following:
///**
// * Defines the "briefcase" application.
// * This string must be unique across all ids in the code.
// */
//ZmId.APP_HELLOWORLD	= "HelloWorld";
//
// Further down in the same file, find:
//ZmId.VIEW_ACCOUNT				= "ACCT";
// and right above it place
//ZmId.VIEW_HELLOWORLD = "HELLOWORLD";



//////////// Edit ZimbraWebClient/WebRoot/js/zimbraMail/share/model/ZmSetting.js
// NOTE: Due to file load order, the following setting should not
// need to be made within the ZmSetting.js file. The setting should
// be done at the end of the application file.
// See the ZmHelloWorldApp.js
//////// Old method below
// We want to set up the helloworld app so that it is visible.
// find the line
// ZmSetting.VOICE_ENABLED			= "VOICE_ENABLED";
// and add the following below it
// For helloworld test app
// ZmSetting.HELLOWORLD_ENABLED    = "HELLOWORLD_ENABLED";



////////// Edit: ZimbraWebClient/WebRoot/js/zimbraMail/share/model/ZmSettings.js
// NOTE: The below settings can now be handled via the new registerSettings
// class method, if the application class implements the registerSettings
// function. See the ZmHelloWorldApp.js code for an example, and use that
// procedure for registering settings.
//////// Old method below
// Now that we have a name for our setting (see the change in ZmSetting.js)
// we need to create a setting object that tells the Zimbra Web Client what
// is the default setup for our app.
// Find the line:
// this.registerSetting("ASSISTANT_ENABLED",				{name:"zimbraFeatureZimbraAssistantEnabled", type:ZmSetting.T_COS, dataType:ZmSetting.D_BOOLEAN, defaultValue:false});
// and right above it, add the definition for "HELLOWORLD_ENABLED".
// Notice we leave the "name" field off of the object literal. It is not needed
// for our application as our application will not have an equivalent LDAP
// configuration. If it did, and this was the real world, we would need that
// name field to map to the name of the setting on the server.
// this.registerSetting("HELLOWORLD_ENABLED", {type:ZmSetting.T_COS, dataType:ZmSetting.D_BOOLEAN, defaultValue:true});




==== Deploy ====
Once all of the files are changed, because we changed the package requirements
we need to go to the base of ZimbraWebClient and run:

ant deploy

This assumes we have a Zimbra Server running in the background.